/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStreamInterface;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStreamInterface* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
static yyconst short int yy_acclist[750] =
    {   0,
      160,  153,  158,  159,  152,  153,  158,  159,  152,  158,
      159,  153,  158,  159,    1,  153,  158,  159,  153,  158,
      159,  153,  158,  159,  153,  158,  159,  153,  158,  159,
      153,  158,  159,  153,  158,  159,  153,  158,  159,  153,
      158,  159,  150,  153,  158,  159,  150,  153,  158,  159,
      153,  158,  159,  153,  158,  159,  153,  158,  159,  153,
      158,  159,  153,  158,  159,  149,  153,  158,  159,  149,
      153,  158,  159,  149,  153,  158,  159,  149,  153,  158,
      159,  149,  153,  158,  159,  149,  153,  158,  159,  149,
      153,  158,  159,  149,  153,  158,  159,  149,  153,  158,

      159,  149,  153,  158,  159,  149,  153,  158,  159,  149,
      153,  158,  159,  149,  153,  158,  159,  149,  153,  158,
      159,  149,  153,  158,  159,  149,  153,  158,  159,  149,
      153,  158,  159,  149,  153,  158,  159,  149,  153,  158,
      159,  149,  153,  158,  159,  149,  153,  158,  159,  153,
      158,  159,  153,  158,  159,  158,  159,  155,  158,  159,
      158,  159,  158,  159,  154,  158,  159,  148,  134,  138,
        3,    2,    4,  137,  135,  140,  150,  139,  143,  142,
      145,  136,  141,  144,  149,  149,  149,  149,  149,  149,
       12,  149,  149,  149,   78,  149,  149,  149,  149,  149,

       21,  149,  149,  149,  149,  149,  149,  149,  149,   32,
      149,  149,   33,  149,   34,  149,  149,   91,  149,  149,
      149,  149,  149,  149,  149,   41,  149,   42,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  107,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  156,  157,  121,  124,
      147,  119,  122,  123,  133,  120,  130,  131,  128,  129,
      132,  127,  149,    6,  149,  149,  149,    9,  149,   10,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,   24,  149,  149,  149,  149,  149,

      149,   28,  149,  149,  149,  149,  149,  149,  149,   92,
      149,  149,   37,  149,   38,  149,   39,  149,  149,  149,
      149,   44,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,   52,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  108,  149,  149,  149,  149,  149,
       63,  149,  149,  149,  149,  149,  149,   67,  149,  125,
      126,  118,  116,  117,  114,  115,  149,  149,  149,  149,
      149,  149,  149,   14,  149,   15,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,   22,  149,  149,

      149,  149,  149,   27,  149,  149,  149,  149,   31,  149,
      149,  149,  149,   36,  149,   40,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,   59,  149,  149,   61,
      149,  105,  149,  149,   62,  149,  149,  149,  149,  149,
      149,   64,  149,  149,  149,   66,  149,  151,  146,    5,
      149,  149,  149,  149,  149,  149,   11,  149,   13,  149,
       79,  149,  149,  149,   18,  149,  149,   19,  149,  149,
      149,  149,  149,  149,   23,  149,   25,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,   49,
      149,   50,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      106,  149,  110,  149,  149,   73,  149,  149,  149,  113,
      149,   65,  149,  149,  149,    7,  149,    8,  149,  149,
      149,  149,  149,   81,  149,  149,   20,  149,  149,   84,
      149,   85,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,   93,  149,   43,  149,  149,  149,  149,
       95,  149,  149,   46,  149,  149,  149,  149,  149,   98,

      149,   51,  149,   99,  149,  149,  100,  149,  149,   54,
      149,  149,   56,  149,  149,  101,  149,  102,  149,  103,
      149,  149,  149,  149,   72,  149,  149,  149,  149,  149,
      149,  149,   69,  149,  149,  149,   17,  149,  149,   83,
      149,  149,  149,   87,  149,  149,  149,   30,  149,  149,
      149,  149,   35,  149,  149,  149,   45,  149,  149,   47,
      149,  149,   97,  149,  149,   53,  149,   71,  149,   55,
      149,  149,  149,   58,  149,  149,  149,  149,  111,  149,
      149,   77,  149,   68,  149,   16,  149,  149,  149,  149,
      149,   88,  149,   29,  149,  149,  149,  149,  149,  149,

       96,  149,  149,  149,   57,  149,  149,  149,  149,  109,
      149,  112,  149,  149,  149,   86,  149,   26,  149,  149,
       74,  149,   90,  149,   94,  149,  149,   48,  149,   70,
      149,  104,  149,  149,   60,  149,  149,   82,  149,   89,
      149,   75,  149,  149,   80,  149,  149,   76,  149
    } ;

static yyconst short int yy_accept[566] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    9,   12,   15,   19,   22,   25,   28,
       31,   34,   37,   40,   43,   47,   51,   54,   57,   60,
       63,   66,   70,   74,   78,   82,   86,   90,   94,   98,
      102,  106,  110,  114,  118,  122,  126,  130,  134,  138,
      142,  146,  150,  153,  156,  158,  161,  163,  165,  168,
      168,  169,  169,  170,  170,  170,  170,  170,  171,  171,
      171,  172,  173,  174,  174,  175,  176,  176,  177,  177,
      177,  178,  178,  178,  178,  179,  179,  179,  180,  181,
      182,  183,  184,  185,  185,  186,  187,  188,  189,  190,

      191,  193,  194,  195,  197,  198,  199,  200,  201,  203,
      204,  205,  206,  207,  208,  209,  210,  212,  213,  215,
      217,  218,  220,  221,  222,  223,  224,  225,  226,  228,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  245,  246,  248,  249,  250,
      251,  252,  253,  254,  255,  256,  257,  257,  257,  258,
      259,  259,  260,  261,  262,  262,  263,  264,  265,  266,
      266,  267,  267,  268,  269,  270,  271,  272,  272,  272,
      272,  273,  274,  276,  277,  278,  280,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  292,  293,  294,

      295,  297,  298,  299,  300,  301,  302,  304,  305,  306,
      307,  308,  309,  310,  312,  313,  315,  317,  319,  320,
      321,  322,  324,  325,  326,  327,  328,  329,  330,  331,
      332,  333,  334,  336,  337,  338,  339,  340,  341,  342,
      343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
      353,  354,  355,  357,  358,  359,  360,  361,  363,  364,
      365,  366,  367,  368,  370,  371,  372,  373,  374,  375,
      375,  376,  376,  376,  377,  378,  379,  380,  381,  382,
      383,  384,  386,  388,  389,  390,  391,  392,  393,  394,
      395,  396,  397,  398,  400,  401,  402,  403,  404,  406,

      407,  408,  409,  411,  412,  413,  414,  416,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
      430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
      440,  441,  442,  443,  444,  445,  446,  447,  449,  450,
      452,  454,  455,  457,  458,  459,  460,  461,  462,  464,
      465,  466,  468,  468,  469,  470,  472,  473,  474,  475,
      476,  477,  479,  481,  483,  484,  485,  487,  488,  490,
      491,  492,  493,  494,  495,  497,  499,  500,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  515,  516,  517,  518,  519,  520,  522,  524,

      525,  526,  527,  528,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  543,  545,  546,
      548,  549,  550,  552,  554,  555,  556,  558,  560,  561,
      562,  563,  564,  566,  567,  569,  570,  572,  574,  575,
      576,  577,  578,  579,  580,  581,  582,  583,  584,  586,
      588,  589,  590,  591,  593,  594,  596,  597,  598,  599,
      600,  602,  604,  606,  607,  609,  610,  612,  613,  615,
      616,  618,  620,  622,  623,  624,  625,  627,  628,  629,
      630,  631,  632,  633,  635,  636,  637,  639,  640,  642,
      643,  644,  646,  647,  648,  650,  651,  652,  653,  655,

      656,  657,  659,  660,  662,  663,  665,  666,  668,  670,
      672,  673,  674,  676,  677,  678,  679,  681,  682,  684,
      686,  688,  689,  690,  691,  692,  694,  696,  697,  698,
      699,  700,  701,  703,  704,  705,  707,  708,  709,  710,
      712,  714,  715,  716,  718,  720,  721,  723,  725,  727,
      728,  730,  732,  734,  735,  737,  738,  740,  742,  744,
      745,  747,  748,  750,  750
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    6,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,   17,
       18,   19,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,   20,    1,   21,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,   49,    1,   50,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    1,    3,    3,    4,    1,    1,    5,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1,    1
    } ;

static yyconst short int yy_base[571] =
    {   0,
        0,    0,  603,  602,  595,  594,  589,  588,  597,  596,
      598,  607,  607,  607,   47,  607,   46,  581,  576,   44,
      579,   45,  582,   50,   57,   61,   67,   62,  574,   46,
      576,    0,   58,   60,   51,   62,   67,   53,   68,   74,
       75,  554,   77,   94,   85,   32,   99,  117,   80,   92,
      101,  553,  573,  572,  607,  607,  576,  575,  607,  115,
      607,  582,  568,  565,  564,  573,  140,  564,  561,  560,
      607,  607,  607,  559,  564,  559,  556,  607,  135,  141,
      146,  563,  561,  554,  607,  551,  519,  552,  607,  607,
      607,  607,  551,  548,    0,  122,  540,   93,  538,  523,

        0,  533,  535,    0,  110,  524,  137,  104,  514,  517,
      139,  141,  517,  520,  519,  512,    0,  515,  510,    0,
      516,    0,  138,  524,  504,  506,  513,  514,    0,    0,
      515,  502,  516,  144,  154,  518,  137,  151,  154,  512,
      156,  516,  503,  168,  498,  171,    0,  490,  498,  172,
      508,  494,  499,  143,  490,  491,  512,  511,  607,  607,
      510,  607,  607,  607,  509,  607,  607,  607,  607,  508,
      607,  185,  607,  607,  607,  607,  607,  507,  505,  505,
      607,  482,  164,  494,  497,    0,    0,  496,  487,  470,
      489,  490,  473,  479,  181,  470,  480,  472,  473,  188,

        0,  468,  472,  479,  463,  477,    0,  478,  475,  464,
      466,  472,  467,    0,  459,    0,    0,    0,  462,  468,
      467,    0,  453,  459,  468,  461,  445,  191,  454,  446,
      457,  448,  447,  460,  455,  438,  437,  452,  451,  454,
      445,  439,  432,  430,  430,  446,  441,  436,  433,  431,
      425,  428,    0,  437,  426,  431,  430,    0,  418,  436,
      181,  424,  427,    0,  607,  607,  607,  607,  607,  214,
      607,  437,  436,  607,  412,  419,  412,  169,  410,  403,
      413,    0,    0,  418,  405,  423,  398,  402,  420,  402,
      399,  403,  397,  407,  409,  389,  408,  396,    0,  182,

      391,  392,    0,  404,  390,  387,    0,    0,  403,  387,
      386,  203,  391,  389,  400,  395,  381,  393,  388,  391,
      390,  376,  373,  379,  390,  385,  371,  370,  384,  368,
      384,  379,  374,  379,  356,  372,  374,    0,  369,    0,
        0,  354,    0,  362,  368,  362,  352,  352,    0,  366,
      365,    0,  217,  220,  607,    0,  348,  367,  347,  347,
      360,    0,    0,    0,  204,  346,    0,  358,    0,  341,
      342,  341,  344,  352,    0,    0,  339,  336,  351,  340,
      344,  343,  338,  208,  345,  329,  196,  339,  340,  342,
      333,  343,  323,  338,  340,  337,  336,    0,    0,  334,

      332,  331,  315,  313,  319,  313,  311,  329,  317,  324,
      324,  306,  309,  306,  319,  308,    0,    0,  307,    0,
      319,  310,    0,    0,  298,  314,    0,    0,  312,  301,
      293,  308,    0,  309,    0,  306,    0,    0,  309,  300,
      289,  306,  291,  302,  299,  302,  281,  297,    0,    0,
      291,  295,  293,    0,  292,    0,  291,  274,  281,  273,
        0,    0,    0,  273,    0,  286,    0,  285,    0,  269,
        0,    0,    0,  267,  282,  271,    0,  284,  279,  271,
      270,  276,  260,    0,  259,  275,    0,  257,    0,  256,
      260,    0,  262,  259,    0,  258,  268,  254,    0,  250,

      259,    0,  255,    0,  248,    0,  260,    0,    0,    0,
      259,  245,    0,  248,  241,  256,    0,  254,    0,    0,
        0,  238,  242,  251,  239,    0,    0,  230,  242,  226,
      235,  211,    0,  219,  219,    0,  216,  211,  213,    0,
        0,  202,  198,    0,    0,  164,    0,    0,    0,  151,
        0,    0,    0,   91,    0,   51,    0,    0,    0,   43,
        0,   31,    0,  607,  248,  254,  260,  264,  267,  271
    } ;

static yyconst short int yy_def[571] =
    {   0,
      564,    1,  565,  565,  565,  565,  565,  565,  565,  565,
      564,  564,  564,  564,  566,  564,  564,  564,  567,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  564,  564,  564,  564,  564,  564,  564,  566,
      564,  566,  564,  564,  564,  564,  567,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  569,  564,  564,
      564,  564,  564,  564,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  570,  564,
      564,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  564,  564,  564,  564,  564,  564,
      564,  570,  564,  564,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  564,  564,  564,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,    0,  564,  564,  564,  564,  564,  564
    } ;

static yyconst short int yy_nxt[658] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   12,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   32,
       40,   32,   32,   41,   42,   43,   44,   45,   32,   46,
       47,   48,   49,   50,   51,   52,   32,   32,   53,   54,
       61,   63,   68,   71,  137,   72,  563,   73,  138,   69,
       74,   64,   76,   92,   93,   77,   62,   78,   79,  562,
       80,   80,   79,  105,   81,   81,   82,   83,   88,   89,
       90,   96,   97,   84,   85,   86,  102,  106,  107,  113,
      561,   98,  108,   99,  115,  114,  103,  100,  109,  101,

      110,  117,  111,  125,  116,  121,  104,  134,  118,  119,
      122,  123,  112,  126,  120,  150,   87,  128,   61,  127,
      151,  129,  152,  185,  135,  139,  186,  136,  153,  140,
      154,  155,  197,  130,   62,  131,  132,  133,  560,  144,
      141,  142,  564,  145,  198,  143,  146,   66,  172,  172,
      191,  192,   79,  147,   80,   80,  148,   79,  182,   81,
       81,  194,  183,  149,  201,  204,  214,  230,  224,  261,
      195,  205,  231,  262,  215,  232,  226,  196,  243,  559,
      202,  203,  206,  225,  227,  233,  234,  239,  235,  236,
      228,  240,  237,  241,  238,  244,  247,  250,  172,  172,

      276,  251,  255,  287,  558,  277,  359,  288,  248,  360,
      252,  270,  256,  257,  294,  316,  349,  379,  295,  317,
      350,  380,  289,  353,  353,  389,  430,  354,  354,  390,
      354,  354,  318,  354,  354,  446,  450,  557,  556,  555,
      451,  554,  553,  431,  552,  551,  550,  447,   55,   55,
       55,   55,   55,   55,   60,   60,   60,   60,   60,   60,
       66,  549,   66,   66,   66,   66,   95,  548,  547,   95,
      179,  546,  179,  272,  545,  272,  272,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      449,  448,  445,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  432,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,

      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  388,  387,  386,  385,  384,
      383,  382,  381,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  358,  357,  356,  355,  273,  352,  351,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,

      303,  302,  301,  300,  299,  298,  297,  296,  293,  292,
      291,  290,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  275,  274,  273,  271,  269,  268,  267,  266,  265,
      264,  263,  260,  259,  258,  254,  253,  249,  246,  245,
      242,  229,  223,  222,  221,  220,  219,  218,  217,  216,
      213,  212,  211,  210,  209,  208,  207,  200,  199,  193,
      190,  189,  188,  187,  184,  181,  180,  178,  177,  176,
      175,  174,  173,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  564,  160,  159,  158,  157,  156,
      124,   94,   91,   75,   70,   67,   65,  564,   59,   59,

       58,   58,   57,   57,   56,   56,   11,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564
    } ;

static yyconst short int yy_chk[658] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       15,   17,   20,   22,   46,   22,  562,   22,   46,   20,
       22,   17,   24,   30,   30,   24,   15,   24,   25,  560,
       25,   25,   26,   35,   26,   26,   27,   27,   28,   28,
       28,   33,   33,   27,   27,   27,   34,   35,   36,   38,
      556,   33,   36,   33,   39,   38,   34,   33,   36,   33,

       37,   40,   37,   43,   39,   41,   34,   45,   40,   40,
       41,   41,   37,   43,   40,   49,   27,   44,   60,   43,
       49,   44,   50,   98,   45,   47,   98,   45,   50,   47,
       51,   51,  108,   44,   60,   44,   44,   44,  554,   48,
       47,   47,   67,   48,  108,   47,   48,   67,   79,   79,
      105,  105,   80,   48,   80,   80,   48,   81,   96,   81,
       81,  107,   96,   48,  111,  112,  123,  137,  134,  154,
      107,  112,  137,  154,  123,  138,  135,  107,  141,  550,
      111,  111,  112,  134,  135,  138,  138,  139,  138,  138,
      135,  139,  138,  139,  138,  141,  144,  146,  172,  172,

      183,  146,  150,  195,  546,  183,  278,  195,  144,  278,
      146,  172,  150,  150,  200,  228,  261,  300,  200,  228,
      261,  300,  195,  270,  270,  312,  365,  270,  270,  312,
      353,  353,  228,  354,  354,  384,  387,  543,  542,  539,
      387,  538,  537,  365,  535,  534,  532,  384,  565,  565,
      565,  565,  565,  565,  566,  566,  566,  566,  566,  566,
      567,  531,  567,  567,  567,  567,  568,  530,  529,  568,
      569,  528,  569,  570,  525,  570,  570,  524,  523,  522,
      518,  516,  515,  514,  512,  511,  507,  505,  503,  501,
      500,  498,  497,  496,  494,  493,  491,  490,  488,  486,

      485,  483,  482,  481,  480,  479,  478,  476,  475,  474,
      470,  468,  466,  464,  460,  459,  458,  457,  455,  453,
      452,  451,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  436,  434,  432,  431,  430,  429,  426,  425,
      422,  421,  419,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      386,  385,  383,  382,  381,  380,  379,  378,  377,  374,
      373,  372,  371,  370,  368,  366,  361,  360,  359,  358,
      357,  351,  350,  348,  347,  346,  345,  344,  342,  339,

      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  311,  310,  309,  306,  305,
      304,  302,  301,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  281,  280,
      279,  277,  276,  275,  273,  272,  263,  262,  260,  259,
      257,  256,  255,  254,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  227,  226,
      225,  224,  223,  221,  220,  219,  215,  213,  212,  211,

      210,  209,  208,  206,  205,  204,  203,  202,  199,  198,
      197,  196,  194,  193,  192,  191,  190,  189,  188,  185,
      184,  182,  180,  179,  178,  170,  165,  161,  158,  157,
      156,  155,  153,  152,  151,  149,  148,  145,  143,  142,
      140,  136,  133,  132,  131,  128,  127,  126,  125,  124,
      121,  119,  118,  116,  115,  114,  113,  110,  109,  106,
      103,  102,  100,   99,   97,   94,   93,   88,   87,   86,
       84,   83,   82,   77,   76,   75,   74,   70,   69,   68,
       66,   65,   64,   63,   62,   58,   57,   54,   53,   52,
       42,   31,   29,   23,   21,   19,   18,   11,   10,    9,

        8,    7,    6,    5,    4,    3,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2008 $author$
 *
 * This software is provided by the author and contributors ``as is'' 
 * and any express or implied warranties, including, but not limited to, 
 * the implied warranties of merchantability and fitness for a particular 
 * purpose are disclaimed. In no event shall the author or contributors 
 * be liable for any direct, indirect, incidental, special, exemplary, 
 * or consequential damages (including, but not limited to, procurement 
 * of substitute goods or services; loss of use, data, or profits; or 
 * business interruption) however caused and on any theory of liability, 
 * whether in contract, strict liability, or tort (including negligence 
 * or otherwise) arising in any way out of the use of this software, 
 * even if advised of the possibility of such damage.
 *
 *   File: caclex.l
 *
 * Author: $author$
 *   Date: 7/30/2008
 **********************************************************************
 */
/*
 * defines
 */
/*
 * includes
 */
#include "caclexer.hxx"
#define XXSwitch(on, text, token) on(text, token); OnSwitch(text, token)
#define XXPush(on, text, token) on(text, token); OnPush(text, token)
#define XXPop(on, text, token) on(text, token); OnPop(text, token)
#define XXReturn(on, text, token) on(text, token); return token
#define XX(on, text, token) on(text, token)
/*
 * options
 */
/*
 * states
 */
#define COMMENT 1
#define COMMENTX 2
#define COMMENTY 3
#define PPROCESS 4

/*
 * rules
 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_SWITCH_STATE
static void yy_switch_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 565 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 607 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, PPROCESS); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ XXPush(OnBeginCommentX, yytext, COMMENTX); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ XXPush(OnBeginCommentX, yytext, COMMENTY); }
	YY_BREAK
/*
  * Ada keywords
  */
case 5:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ABORT_); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ABS_); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ACCEPT_); }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ACCESS_); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ALL_); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, AND_); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ARRAY_); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, AT_); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, BEGIN_); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, BODY_); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, CASE_); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, CONSTANT_); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DECLARE_); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DELAY_); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DELTA_); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DIGITS_); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DO_); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ELSE_); }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ELSIF_); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, END_); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ENTRY_); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, EXCEPTION_); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, EXIT_); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, FOR_); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, FUNCTION_); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, GENERIC_); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, GOTO_); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, IF_); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, IN_); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, IS_); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LIMITED_); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LOOP_); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, MOD_); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, NEW_); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, NOT_); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, NULL_); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OF_); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OR_); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OTHERS_); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OUT_); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PACKAGE_); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PRAGMA_); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PRIVATE_); }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PROCEDURE_); }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RAISE_); }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RANGE_); }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RECORD_); }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, REM_); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RENAMES_); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RETURN_); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, REVERSE_); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SELECT_); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SEPARATE_); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SUBTYPE_); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TASK_); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TERMINATE_); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, THEN_); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TYPE_); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, USE_); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, WHEN_); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, WHILE_); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, WITH_); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, XOR_); }
	YY_BREAK
/*
  * Ada 95 keywords
  */
case 68:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ABSTRACT_); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ALIASED_); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PROTECTED_); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, REQUEUE_); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TAGGED_); }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, UNTIL_); }
	YY_BREAK
/*
  * Ada 2005 keywords
  */
case 74:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, INTERFACE_); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OVERRIDING_); }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SYNCHRONIZED_); }
	YY_BREAK
/*
  * Ada** keywords
  */
case 77:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ABSOLUTE_); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, BY_); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, CATCH_); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, CONSTRUCTOR_); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DELETE_); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DESTRUCTOR_); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DISPOSE_); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DOWNTO_); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ELSEIF_); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ENUMERATE_); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, EXTENDS_); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, EXTERNAL_); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, IMPLEMENTS_); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, INTERRUPT_); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LN_); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LOG_); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OBJECT_); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, OTHERWISE_); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PACKED_); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PARALLEL_); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PROGRAM_); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PUBLIC_); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, REMOTE_); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, REPEAT_); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SERIAL_); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SIGNED_); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, STATIC_); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, STRUCTURE_); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, THIS__); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, THROW_); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TO_); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, TRY_); }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, UNSIGNED_); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, UNION_); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, VIRTUAL_); }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, VOLATILE_); }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, WHERE_); }
	YY_BREAK
/*
  * Ada** operators
  */
case 114:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LEFT_); }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RIGHT_); }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, POWER_); }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ROOT_); }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ORDER_); }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, MULTIPLY_); }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DIVIDE_); }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, MODULO_); }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ADD_); }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SUBTRACT_); }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, INTERSECT_); }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, INCLUDE_); }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, EXCLUDE_); }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, POINT_); }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LSHIFT_); }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RSHIFT_); }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, INCREMENT_); }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DECREMENT_); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, COMPLEMENT_); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ELIPSIS_); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, PCENTPCENT_); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, SLASHSLASH_); }
	YY_BREAK
/*
  * Ada operators
  */
case 136:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ARROW_); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, DOTDOT_); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, STARSTAR_); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, ASSIGN_); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, NE_); }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, GE_); }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LE_); }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, LLABEL_); }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, RLABEL_); }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, BOX_); }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ XXReturn(OnIdentifierToken, yytext, LABEL_); }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ XXReturn(OnCharToken, yytext, CHAR_); }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ XXReturn(OnStringToken, yytext, STRING_); }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ XXReturn(OnIdentifierToken, yytext, IDENTIFIER_); }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ XXReturn(OnIntegerToken, yytext, INTEGER_); }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ XXReturn(OnRealToken, yytext, REAL_); }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ XXReturn(OnToken, yytext, yytext[0]); }
	YY_BREAK


case 154:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, PPROCESS); }
	YY_BREAK


case 155:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, COMMENT); }
	YY_BREAK


case 156:
YY_RULE_SETUP
{ XXPop(OnEndCommentX, yytext, COMMENTX); }
	YY_BREAK


case 157:
YY_RULE_SETUP
{ XXPop(OnEndCommentX, yytext, COMMENTY); }
	YY_BREAK


case 158:
YY_RULE_SETUP
{ }
	YY_BREAK

case 159:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(COMMENTX):
			case YY_STATE_EOF(COMMENTY):
			case YY_STATE_EOF(PPROCESS):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStreamInterface &out, cCharStreamInterface &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStreamInterface *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStreamInterface* new_in, cCharStreamInterface* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 565 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 565 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 564);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStreamInterface* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStreamInterface* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStreamInterface* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_SWITCH_STATE
void yyIsLexer::yy_switch_state( int new_state )
    {
    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

