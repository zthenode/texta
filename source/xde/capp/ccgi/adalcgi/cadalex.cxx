/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStreamInterface;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStreamInterface* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 173
#define YY_END_OF_BUFFER 174
static yyconst short int yy_acclist[731] =
    {   0,
      174,  172,  173,  172,  173,  172,  173,  154,  172,  173,
      172,  173,  145,  172,  173,  172,  173,  149,  172,  173,
      147,  172,  173,  148,  172,  173,  172,  173,  150,  172,
      173,  172,  173,  151,  170,  172,  173,  153,  172,  173,
      152,  171,  172,  173,  172,  173,  158,  172,  173,  158,
      172,  173,  158,  172,  173,  158,  172,  173,  158,  172,
      173,  158,  172,  173,  158,  172,  173,  158,  172,  173,
      158,  172,  173,  158,  172,  173,  158,  172,  173,  158,
      172,  173,  158,  172,  173,  158,  172,  173,  158,  172,
      173,  158,  172,  173,  158,  172,  173,  158,  172,  173,

      158,  172,  173,  158,  172,  173,  158,  172,  173,  146,
      172,  173,  172,  173,  170,  172,  173,  171,  172,  173,
      172,  173,  165,  172,  173,  169,  172,  173,  172,  173,
      172,  173,  161,  172,  173,  162,  172,  173,  170,  172,
      173,  156,  154,  134,  142,    2,    1,    3,  141,  133,
      137,  139,  143,  135,  138,  140,  136,  144,  158,  158,
      158,  158,  158,  158,   11,   77,  158,  158,  158,   78,
      158,  158,  158,  158,  158,   20,  158,  158,  158,  158,
      158,  158,  158,  158,   31,  158,  158,   32,  158,   33,
      158,  158,   91,  158,  158,  158,  158,  158,  158,  158,

       40,  158,   41,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      107,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  163,  164,  167,  166,  168,  159,  161,  160,  126,
      154,  154,  121,  124,  157,  119,  122,  123,  132,  120,
      130,  131,  128,  129,  127,  158,    5,  158,  158,  158,
        8,  158,    9,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,   23,  158,  158,
      158,  158,  158,  158,   27,  158,  158,  158,  158,  158,
      158,  158,   92,  158,  158,   36,  158,   37,  158,   38,

      158,  158,  158,  158,   43,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,   51,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  108,  158,  158,
      158,  158,  158,   62,  158,  158,  158,  158,  158,  158,
       66,  158,  125,  118,  116,  117,  114,  115,  158,  158,
      158,  158,  158,  158,  158,   13,  158,   14,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,   21,
      158,  158,  158,  158,  158,   26,  158,  158,  158,  158,
       30,  158,  158,  158,  158,   35,  158,   39,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,   58,  158,
      158,   60,  158,  105,  158,  158,   61,  158,  158,  158,
      158,  158,  158,   63,  158,  158,  158,   65,  158,  155,
        4,  158,  158,  158,  158,  158,  158,   10,  158,   12,
      158,   79,  158,  158,  158,   17,  158,  158,   18,  158,
      158,  158,  158,  158,  158,   22,  158,   24,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

       48,  158,   49,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  106,  158,  110,  158,  158,   72,  158,  158,  158,
      113,  158,   64,  158,  158,  158,    6,  158,    7,  158,
      158,  158,  158,  158,   81,  158,  158,   19,  158,  158,
       84,  158,   85,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,   93,  158,   42,  158,  158,  158,
      158,   95,  158,  158,   45,  158,  158,  158,  158,  158,
       98,  158,   50,  158,   99,  158,  158,  100,  158,  158,
       53,  158,  158,   55,  158,  158,  101,  158,  102,  158,

      103,  158,  158,  158,  158,   71,  158,  158,  158,  158,
      158,  158,  158,   68,  158,  158,  158,   16,  158,  158,
       83,  158,  158,  158,   87,  158,  158,  158,   29,  158,
      158,  158,  158,   34,  158,  158,  158,   44,  158,  158,
       46,  158,  158,   97,  158,  158,   52,  158,   70,  158,
       54,  158,  158,  158,   57,  158,  158,  158,  158,  111,
      158,  158,   76,  158,   67,  158,   15,  158,  158,  158,
      158,  158,   88,  158,   28,  158,  158,  158,  158,  158,
      158,   96,  158,  158,  158,   56,  158,  158,  158,  158,
      109,  158,  112,  158,  158,  158,   86,  158,   25,  158,

      158,   73,  158,   90,  158,   94,  158,  158,   47,  158,
       69,  158,  104,  158,  158,   59,  158,  158,   82,  158,
       89,  158,   74,  158,  158,   80,  158,  158,   75,  158
    } ;

static yyconst short int yy_accept[574] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    6,    8,   11,   13,   16,
       18,   21,   24,   27,   29,   32,   34,   38,   41,   45,
       47,   50,   53,   56,   59,   62,   65,   68,   71,   74,
       77,   80,   83,   86,   89,   92,   95,   98,  101,  104,
      107,  110,  113,  115,  118,  121,  123,  126,  129,  131,
      133,  136,  139,  142,  142,  142,  143,  143,  144,  145,
      145,  145,  145,  145,  146,  146,  146,  147,  148,  149,
      149,  150,  151,  151,  152,  152,  152,  152,  153,  153,
      154,  155,  156,  157,  158,  159,  159,  160,  161,  162,

      163,  164,  165,  168,  169,  170,  172,  173,  174,  175,
      176,  178,  179,  180,  181,  182,  183,  184,  185,  187,
      188,  190,  192,  193,  195,  196,  197,  198,  199,  200,
      201,  203,  205,  206,  207,  208,  209,  210,  211,  212,
      213,  214,  215,  216,  217,  218,  219,  220,  221,  223,
      224,  225,  226,  227,  228,  229,  230,  231,  232,  232,
      233,  234,  235,  236,  237,  237,  238,  238,  239,  239,
      240,  240,  241,  242,  243,  243,  244,  245,  246,  246,
      247,  248,  249,  250,  250,  251,  252,  253,  254,  255,
      255,  255,  255,  256,  257,  259,  260,  261,  263,  265,

      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  280,  281,  282,  283,  284,  285,  287,
      288,  289,  290,  291,  292,  293,  295,  296,  298,  300,
      302,  303,  304,  305,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  319,  320,  321,  322,  323,
      324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
      334,  335,  336,  337,  338,  340,  341,  342,  343,  344,
      346,  347,  348,  349,  350,  351,  353,  354,  355,  356,
      357,  358,  358,  358,  359,  360,  361,  362,  363,  364,
      365,  366,  368,  370,  371,  372,  373,  374,  375,  376,

      377,  378,  379,  380,  382,  383,  384,  385,  386,  388,
      389,  390,  391,  393,  394,  395,  396,  398,  400,  401,
      402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
      412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
      422,  423,  424,  425,  426,  427,  428,  429,  431,  432,
      434,  436,  437,  439,  440,  441,  442,  443,  444,  446,
      447,  448,  450,  451,  453,  454,  455,  456,  457,  458,
      460,  462,  464,  465,  466,  468,  469,  471,  472,  473,
      474,  475,  476,  478,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  493,  494,  495,

      496,  497,  498,  499,  500,  501,  503,  505,  506,  507,
      508,  509,  510,  511,  512,  513,  514,  515,  516,  517,
      518,  519,  520,  521,  522,  524,  526,  527,  529,  530,
      531,  533,  535,  536,  537,  539,  541,  542,  543,  544,
      545,  547,  548,  550,  551,  553,  555,  556,  557,  558,
      559,  560,  561,  562,  563,  564,  565,  567,  569,  570,
      571,  572,  574,  575,  577,  578,  579,  580,  581,  583,
      585,  587,  588,  590,  591,  593,  594,  596,  597,  599,
      601,  603,  604,  605,  606,  608,  609,  610,  611,  612,
      613,  614,  616,  617,  618,  620,  621,  623,  624,  625,

      627,  628,  629,  631,  632,  633,  634,  636,  637,  638,
      640,  641,  643,  644,  646,  647,  649,  651,  653,  654,
      655,  657,  658,  659,  660,  662,  663,  665,  667,  669,
      670,  671,  672,  673,  675,  677,  678,  679,  680,  681,
      682,  684,  685,  686,  688,  689,  690,  691,  693,  695,
      696,  697,  699,  701,  702,  704,  706,  708,  709,  711,
      713,  715,  716,  718,  719,  721,  723,  725,  726,  728,
      729,  731,  731
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    1,    6,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,   20,    1,   21,   22,    1,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,   49,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    3,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    1
    } ;

static yyconst short int yy_base[584] =
    {   0,
        0,    0,   41,   42,   49,   50,   53,   54,   63,   73,
       92,    0,  684,  685,  668,  138,    0,   70,  667,  661,
       68,  665,  134,  667,   39,  142,   69,  659,   60,  662,
        0,  130,  130,  125,  119,  129,  131,   54,  143,  145,
      639,  146,  162,  157,  164,  165,  186,  152,  164,  168,
      638,  659,  662,  685,  685,  661,  685,  685,  206,  165,
        0,  685,  191,  653,  210,  685,  668,  655,  653,  649,
      648,  657,  216,  649,  645,  644,  685,  685,  685,  643,
      648,  644,  640,  685,  647,  645,  638,  685,  635,  638,
      685,  685,  685,  685,  637,  633,    0,  184,  625,  197,

      623,  608,    0,  618,  620,    0,  193,  609,  195,  198,
      599,  602,  206,  212,  602,  605,  604,  597,    0,  600,
      595,    0,  601,    0,  209,  609,  589,  591,  598,  599,
        0,    0,  600,  587,  601,  215,  219,  603,  216,  226,
      219,  597,  218,  601,  588,  231,  583,  236,    0,  575,
      583,  238,  593,  579,  584,  244,  575,  576,  597,  685,
      685,  685,  685,  685,  262,  685,  612,    0,  225,  685,
      611,  685,  598,  597,  592,  685,  685,  685,  591,  685,
      685,  685,  685,  590,  685,  685,  685,  685,  685,  589,
      587,  587,  685,  564,  236,  576,  579,    0,    0,  578,

      569,  552,  571,  572,  555,  561,  254,  552,  562,  554,
      555,  256,    0,  550,  554,  561,  545,  559,    0,  560,
      557,  546,  548,  554,  549,    0,  541,    0,    0,    0,
      544,  550,  549,    0,  535,  541,  550,  543,  527,  259,
      536,  528,  539,  530,  529,  542,  537,  520,  519,  534,
      533,  536,  527,  521,  514,  512,  512,  528,  523,  518,
      515,  513,  507,  510,    0,  519,  508,  513,  512,    0,
      500,  518,  249,  506,  509,    0,  685,  685,  685,  685,
      685,  519,  518,  685,  494,  501,  494,  252,  492,  485,
      495,    0,    0,  500,  487,  505,  480,  484,  502,  484,

      481,  485,  479,  489,  491,  471,  490,  478,    0,  255,
      473,  474,    0,  486,  472,  469,    0,    0,  485,  469,
      468,  271,  473,  471,  482,  477,  463,  475,  470,  473,
      472,  458,  455,  461,  472,  467,  453,  452,  466,  450,
      466,  461,  456,  461,  438,  454,  456,    0,  451,    0,
        0,  436,    0,  444,  450,  444,  434,  434,    0,  448,
      447,    0,  685,    0,  430,  449,  429,  429,  442,    0,
        0,    0,  263,  428,    0,  440,    0,  423,  424,  423,
      426,  434,    0,    0,  421,  418,  433,  422,  426,  425,
      420,  264,  427,  411,  261,  421,  422,  424,  415,  425,

      405,  420,  422,  419,  418,    0,    0,  416,  414,  413,
      397,  395,  401,  395,  393,  411,  399,  406,  406,  388,
      391,  388,  401,  390,    0,    0,  389,    0,  401,  392,
        0,    0,  380,  396,    0,    0,  394,  383,  375,  390,
        0,  391,    0,  388,    0,    0,  391,  382,  371,  388,
      373,  384,  381,  384,  363,  379,    0,    0,  373,  377,
      375,    0,  374,    0,  373,  356,  363,  355,    0,    0,
        0,  355,    0,  368,    0,  367,    0,  351,    0,    0,
        0,  349,  364,  353,    0,  366,  361,  353,  352,  358,
      342,    0,  341,  357,    0,  339,    0,  338,  342,    0,

      344,  341,    0,  340,  350,  336,    0,  332,  341,    0,
      337,    0,  330,    0,  342,    0,    0,    0,  341,  327,
        0,  330,  323,  338,    0,  336,    0,    0,    0,  320,
      322,  329,  317,    0,    0,  310,  315,  299,  303,  293,
        0,  295,  279,    0,  273,  268,  270,    0,    0,  237,
      182,    0,    0,  162,    0,    0,    0,  165,    0,    0,
        0,  103,    0,  104,    0,    0,    0,   62,    0,   38,
        0,  685,  306,  313,   46,  320,  324,  331,  336,  343,
      347,  350,  354
    } ;

static yyconst short int yy_def[584] =
    {   0,
      572,    1,  573,  573,  573,  573,  573,  573,  573,  573,
      572,   11,  572,  572,  572,  574,  575,  572,  572,  576,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  572,  572,  572,  572,  572,  572,  572,  572,  578,
      579,  572,  580,  572,  574,  572,  574,  581,  572,  572,
      572,  572,  576,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  582,
      572,  572,  572,  572,  572,  572,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  572,  572,
      572,  572,  572,  572,  578,  572,  578,  579,  580,  572,
      580,  572,  581,  581,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      583,  572,  572,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  572,  572,  572,  572,
      572,  583,  572,  572,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  572,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,    0,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572
    } ;

static yyconst short int yy_nxt[735] =
    {   0,
       14,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   14,   26,   14,   27,   28,   29,   14,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   31,
       39,   31,   31,   40,   41,   42,   43,   44,   31,   45,
       46,   47,   48,   49,   50,   51,   31,   31,   52,   53,
       53,   82,   68,   83,   57,   57,   84,   54,   54,   55,
       55,   56,   56,  571,   58,   54,   54,   55,   55,   54,
       54,   55,   55,   59,   58,   69,   74,   94,   95,   54,
      117,   55,   75,   59,   70,   90,   91,   92,  570,   54,
      118,   55,   14,   14,   14,   60,   14,   14,   14,   14,

       14,   14,   14,   61,   14,   14,   14,   62,   63,   14,
       55,   14,   14,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       14,   66,   77,  569,   78,  109,   79,  107,   80,  110,
      568,   85,   86,   98,   99,  111,  104,   67,   87,   88,
       89,  108,  112,  100,  113,  101,  105,  115,  166,  102,
      119,  103,  127,  116,  114,  123,  106,  120,  121,  136,
      124,  125,  128,  122,  167,  130,  139,  152,  129,  131,
      140,  141,  153,  567,  154,  142,  137,  156,  157,  138,

      155,  132,  566,  133,  134,  135,  143,  144,  146,  170,
      171,  145,  147,   66,  162,  148,  163,  572,  164,  206,
      194,  565,  149,   72,  195,  150,  209,  197,  207,   67,
      198,  213,  151,  203,  204,  208,  216,  226,  210,  236,
      255,  238,  217,  170,  171,  227,  242,  214,  215,  239,
      244,  243,  251,  218,  237,  240,  252,  256,  253,  259,
      245,  246,  262,  247,  248,  166,  263,  249,  267,  250,
      273,  260,  286,  564,  274,  264,  297,  287,  268,  269,
      298,  167,  304,  326,  359,  438,  305,  327,  360,  367,
      387,  454,  368,  397,  388,  299,  563,  398,  562,  561,

      328,  458,  439,  455,  560,  459,   14,   14,   14,   14,
       14,   14,   14,   65,   65,   65,   65,   65,   65,   65,
       72,  559,   72,   72,   72,   72,   72,   97,  558,  557,
       97,  165,  165,  165,  165,  165,  165,  165,  168,  168,
      556,  555,  168,  169,  169,  169,  169,  169,  169,  169,
      174,  554,  553,  174,  191,  552,  191,  282,  551,  282,
      282,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,

      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  457,  456,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,

      405,  404,  403,  402,  401,  400,  399,  396,  395,  394,
      393,  392,  391,  390,  389,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  366,  365,  364,  363,  283,  362,  361,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      303,  302,  301,  300,  296,  295,  294,  293,  292,  291,

      290,  289,  288,  285,  284,  283,  281,  280,  279,  278,
      173,  173,  572,  572,  277,  276,  275,  272,  271,  270,
      266,  265,  261,  258,  257,  254,  241,  235,  234,  233,
      232,  231,  230,  229,  228,  225,  224,  223,  222,  221,
      220,  219,  212,  211,  205,  202,  201,  200,  199,  196,
      193,  192,  190,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  173,  572,
      172,  161,  160,  159,  158,  126,   96,   93,   81,   76,
       73,   71,   64,  572,   13,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572
    } ;

static yyconst short int yy_chk[735] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,   25,  575,   25,    7,    8,   25,    3,    4,    3,
        4,    5,    6,  570,    9,    5,    6,    5,    6,    7,
        8,    7,    8,    9,   10,   18,   21,   29,   29,    9,
       38,    9,   21,   10,   18,   27,   27,   27,  568,   10,
       38,   10,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   16,   23,  564,   23,   35,   23,   34,   23,   35,
      562,   26,   26,   32,   32,   35,   33,   16,   26,   26,
       26,   34,   36,   32,   36,   32,   33,   37,   60,   32,
       39,   32,   42,   37,   36,   40,   33,   39,   39,   44,
       40,   40,   42,   39,   60,   43,   45,   48,   42,   43,
       45,   46,   48,  558,   49,   46,   44,   50,   50,   44,

       49,   43,  554,   43,   43,   43,   46,   46,   47,   63,
       63,   46,   47,   65,   59,   47,   59,   73,   59,  109,
       98,  551,   47,   73,   98,   47,  110,  100,  109,   65,
      100,  113,   47,  107,  107,  109,  114,  125,  110,  136,
      143,  137,  114,  169,  169,  125,  139,  113,  113,  137,
      140,  139,  141,  114,  136,  137,  141,  143,  141,  146,
      140,  140,  148,  140,  140,  165,  148,  140,  152,  140,
      156,  146,  195,  550,  156,  148,  207,  195,  152,  152,
      207,  165,  212,  240,  273,  373,  212,  240,  273,  288,
      310,  392,  288,  322,  310,  207,  547,  322,  546,  545,

      240,  395,  373,  392,  543,  395,  573,  573,  573,  573,
      573,  573,  573,  574,  574,  574,  574,  574,  574,  574,
      576,  542,  576,  576,  576,  576,  576,  577,  540,  539,
      577,  578,  578,  578,  578,  578,  578,  578,  579,  579,
      538,  537,  579,  580,  580,  580,  580,  580,  580,  580,
      581,  536,  533,  581,  582,  532,  582,  583,  531,  583,
      583,  530,  526,  524,  523,  522,  520,  519,  515,  513,
      511,  509,  508,  506,  505,  504,  502,  501,  499,  498,
      496,  494,  493,  491,  490,  489,  488,  487,  486,  484,
      483,  482,  478,  476,  474,  472,  468,  467,  466,  465,

      463,  461,  460,  459,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  444,  442,  440,  439,  438,  437,
      434,  433,  430,  429,  427,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  394,  393,  391,  390,  389,  388,  387,  386,
      385,  382,  381,  380,  379,  378,  376,  374,  369,  368,
      367,  366,  365,  361,  360,  358,  357,  356,  355,  354,
      352,  349,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,

      329,  328,  327,  326,  325,  324,  323,  321,  320,  319,
      316,  315,  314,  312,  311,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      291,  290,  289,  287,  286,  285,  283,  282,  275,  274,
      272,  271,  269,  268,  267,  266,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      239,  238,  237,  236,  235,  233,  232,  231,  227,  225,
      224,  223,  222,  221,  220,  218,  217,  216,  215,  214,
      211,  210,  209,  208,  206,  205,  204,  203,  202,  201,

      200,  197,  196,  194,  192,  191,  190,  184,  179,  175,
      174,  173,  171,  167,  159,  158,  157,  155,  154,  153,
      151,  150,  147,  145,  144,  142,  138,  135,  134,  133,
      130,  129,  128,  127,  126,  123,  121,  120,  118,  117,
      116,  115,  112,  111,  108,  105,  104,  102,  101,   99,
       96,   95,   90,   89,   87,   86,   85,   83,   82,   81,
       80,   76,   75,   74,   72,   71,   70,   69,   68,   67,
       64,   56,   53,   52,   51,   41,   30,   28,   24,   22,
       20,   19,   15,   13,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2008 $author$
 *
 * This software is provided by the author and contributors ``as is'' 
 * and any express or implied warranties, including, but not limited to, 
 * the implied warranties of merchantability and fitness for a particular 
 * purpose are disclaimed. In no event shall the author or contributors 
 * be liable for any direct, indirect, incidental, special, exemplary, 
 * or consequential damages (including, but not limited to, procurement 
 * of substitute goods or services; loss of use, data, or profits; or 
 * business interruption) however caused and on any theory of liability, 
 * whether in contract, strict liability, or tort (including negligence 
 * or otherwise) arising in any way out of the use of this software, 
 * even if advised of the possibility of such damage.
 *
 *   File: cadalex.l
 *
 * Author: $author$
 *   Date: 6/13/2008
 **********************************************************************
 */
/*
 * defines
 */
/*
 * includes
 */
#include "cacparse.h"
#include "cadalexer.hxx"
#define XXSwitch(on, text, token) on(text, token); OnSwitch(text, token)
#define XXPush(on, text, token) on(text, token); OnPush(text, token)
#define XXPop(on, text, token) on(text, token); OnPop(text, token)
#define XXReturn(on, text, token) on(text, token); return token
#define XX(on, text, token) on(text, token)
/*
 * options
 */
#define COMMENT 1
#define COMMENT2 2
#define COMMENTLN 3
#define PPROCESS 4
#define IMPORT 5

/*
 * rules
 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_SWITCH_STATE
static void yy_switch_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 573 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 685 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ XXPush(OnBeginCommentLN, yytext, COMMENTLN); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT2); }
	YY_BREAK
/*
  * Ada keywords
  */
case 4:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
/*
  * Ada 95 keywords
  */
case 67:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
/*
  * Ada 2005 keywords
  */
case 73:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
/*
  * Ada** keywords
  */
case 76:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, ABSOLUTE_); }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, AT_); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, BY_); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, CATCH_); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, CONSTRUCTOR_); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, DELETE_); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, DESTRUCTOR_); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, DISPOSE_); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, DOWNTO_); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, ELSEIF_); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, ENUMERATE_); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, EXTENDS_); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, EXTERNAL_); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, IMPLEMENTS_); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, INTERRUPT_); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, LN_); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, LOG_); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, OBJECT_); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, OTHERWISE_); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, PACKED_); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, PARALLEL_); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, PROGRAM_); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, PUBLIC_); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, REMOTE_); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, REPEAT_); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, SERIAL_); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, SIGNED_); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, STATIC_); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, STRUCTURE_); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, THIS__); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, THROW_); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, TO_); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, TRY_); }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, UNSIGNED_); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, UNION_); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, VIRTUAL_); }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, VOLATILE_); }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, WHERE_); }
	YY_BREAK
/*
  * Ada** operators
  */
case 114:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
/*
  * Ada operators
  */
case 135:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
/*
  * Ada operators
  */
case 145:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ XXPush(OnProcessor, yytext, PPROCESS); }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ XX(OnDefine, yytext, 0); }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ XX(OnString, yytext, 0); }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ XX(OnChar, yytext, 0); }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ XX(OnText, yytext, 0); }
	YY_BREAK


case 159:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ XX(OnImportL, yytext, 0); }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ XXPop(OnText, yytext, IMPORT);}
	YY_BREAK


case 163:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, COMMENT); }
	YY_BREAK


case 164:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, COMMENT2); }
	YY_BREAK


case 165:
YY_RULE_SETUP
{ XXPop(OnEndCommentLN, yytext, COMMENTLN); }
	YY_BREAK


case 166:
YY_RULE_SETUP
{ XXSwitch(OnBeginCommentLN, yytext, COMMENTLN); }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT2); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ XXPop(OnText, yytext, PPROCESS); }
	YY_BREAK


case 170:
YY_RULE_SETUP
{ XX(OnLT, yytext, 0); }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ XX(OnGT, yytext, 0); }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ XX(OnText, yytext, 0); }
	YY_BREAK

case 173:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(COMMENT2):
			case YY_STATE_EOF(COMMENTLN):
			case YY_STATE_EOF(PPROCESS):
			case YY_STATE_EOF(IMPORT):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStreamInterface &out, cCharStreamInterface &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStreamInterface *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStreamInterface* new_in, cCharStreamInterface* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 573 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 573 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 572);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStreamInterface* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStreamInterface* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStreamInterface* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_SWITCH_STATE
void yyIsLexer::yy_switch_state( int new_state )
    {
    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

