/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStreamInterface;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStreamInterface* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 160
#define YY_END_OF_BUFFER 161
static yyconst short int yy_acclist[813] =
    {   0,
      161,  159,  160,  159,  160,  159,  160,  159,  160,  159,
      160,  157,  159,  160,  158,  159,  160,  159,  160,  151,
      159,  160,  151,  159,  160,  151,  159,  160,  151,  159,
      160,  151,  159,  160,  151,  159,  160,  151,  159,  160,
      151,  159,  160,  151,  159,  160,  151,  159,  160,  151,
      159,  160,  151,  159,  160,  151,  159,  160,  151,  159,
      160,  151,  159,  160,  151,  159,  160,  151,  159,  160,
      151,  159,  160,  151,  159,  160,  151,  159,  160,  151,
      159,  160,  151,  159,  160,  159,  160,  156,  159,  160,
      154,  159,  160,  159,  160,  157,  159,  160,  144,  148,

      148,  145,    1,    2,  149,  151,  151,  151,  151,   70,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,    3,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  120,  151,    9,
      151,  151,   82,  151,   86,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   61,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  155,  152,  153,  148,  148,  148,  149,
      151,   59,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    5,  151,  151,  151,
      151,  151,  151,  151,   51,  151,  151,  151,  151,  151,
      151,  151,   18,  151,  128,  151,  151,   58,  151,  151,
       63,  151,   89,  151,  151,  151,  151,  151,  151,  151,
      151,   95,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   11,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,   60,  151,  151,

      148,  148,  151,  151,  151,  151,   22,  151,   71,  151,
      151,   47,  151,  151,   72,  151,  151,    7,  151,  151,
       48,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,   76,  151,   10,  151,   45,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   15,
      151,  151,  151,  151,  151,  151,  151,   87,  151,   53,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   65,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  139,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   21,

      151,  151,  151,   57,  151,  151,  101,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   46,  151,  151,  151,
       64,  151,  148,  148,  151,   69,  151,  151,  151,  110,
      151,  151,  151,   14,  151,  151,   12,  151,  151,   42,
      151,   23,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   77,  151,  151,  151,  151,   56,  151,
      119,  151,   79,  151,   49,  151,  151,  151,  151,  151,
      151,  151,   83,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,   96,

      151,  151,  151,   52,  151,  151,  151,  151,  151,  151,
      151,  151,  140,  151,  151,  151,  151,   13,  151,  151,
      151,  151,  151,  151,  102,  151,  151,   44,  151,  151,
      151,  151,   36,  106,  151,  151,  151,    4,  151,  148,
      148,  151,  107,  151,  108,  151,   62,  151,  151,  151,
      151,  151,  151,  151,  151,  151,   19,  151,  111,  151,
      132,  151,   50,  151,  151,  151,  118,  151,   26,  151,
      151,  151,   34,  151,  151,  151,  125,  151,   28,  151,
      151,  151,  151,  151,  151,  151,  127,  151,  151,  151,
       88,  151,  151,  151,  151,   92,  151,  151,  151,  151,

      151,  151,   31,  151,  151,  151,  151,  151,  135,  151,
       17,  151,   97,  151,  151,   54,  151,   20,  151,  151,
       27,  151,  151,   99,  151,   43,  151,    6,  151,  151,
      151,  142,  151,  151,  151,   41,  151,  151,  100,  151,
      151,  104,  151,  151,  105,  151,  151,  151,  147,  148,
      148,  151,  115,  151,  151,   73,  151,  151,   74,  151,
        8,  151,  150,  151,  151,  112,  151,  113,  151,  114,
      151,  151,  151,  117,  151,   78,  151,   80,  151,  151,
      151,  151,   66,  151,  151,  151,   35,  151,  151,  133,
      151,  151,  151,  151,  129,  151,   93,  151,   32,  151,

      151,  151,  151,  151,  151,  134,  151,  151,  151,  151,
      151,  151,  151,  151,   39,  151,  151,  151,  151,   29,
      151,  151,  146,  148,   68,  151,   67,  151,   16,  151,
       75,  151,   30,  151,  116,  151,  151,   81,  151,  151,
      151,   85,  151,  151,  151,   90,  151,   91,  151,  130,
      151,  151,  131,  151,   94,  151,   24,  151,  136,  151,
      137,  151,  151,  138,  151,  151,   38,  151,  151,   40,
      151,  151,   55,  151,   25,  151,  124,  151,  151,   84,
      151,   37,  151,  109,  151,   33,  151,  151,  151,  143,
      151,  103,  151,  151,  151,  123,  151,  126,  151,   98,

      151,  151,  151,  122,  151,  151,  151,  141,  151,  151,
      121,  151
    } ;

static yyconst short int yy_accept[625] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    6,    8,   10,   12,   15,   18,   20,   23,   26,
       29,   32,   35,   38,   41,   44,   47,   50,   53,   56,
       59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
       88,   91,   94,   96,   99,   99,  100,  100,  101,  102,
      102,  103,  103,  104,  105,  106,  107,  108,  109,  110,
      112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
      122,  123,  124,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  140,  142,  143,  145,
      147,  148,  149,  150,  151,  152,  153,  154,  155,  157,

      158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
      178,  179,  180,  181,  182,  183,  184,  185,  185,  186,
      186,  186,  187,  187,  188,  189,  190,  191,  192,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
      205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  229,  230,  231,  232,  233,  234,  235,
      237,  238,  239,  240,  241,  242,  243,  245,  247,  248,
      250,  251,  253,  255,  256,  257,  258,  259,  260,  261,

      262,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
      283,  284,  286,  287,  288,  289,  290,  291,  292,  293,
      294,  295,  296,  297,  298,  300,  301,  302,  303,  304,
      305,  306,  307,  309,  311,  312,  314,  315,  317,  318,
      320,  321,  323,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  337,  339,  341,  342,  343,
      344,  345,  346,  347,  348,  349,  350,  352,  353,  354,
      355,  356,  357,  358,  360,  362,  363,  364,  365,  366,
      367,  368,  369,  370,  371,  372,  373,  374,  375,  376,

      377,  379,  380,  381,  382,  383,  384,  385,  386,  387,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  400,  402,  403,  404,  406,  407,  409,  410,  411,
      412,  413,  414,  415,  416,  417,  419,  420,  421,  423,
      424,  425,  426,  428,  429,  430,  432,  433,  434,  436,
      437,  439,  440,  442,  444,  445,  446,  447,  448,  449,
      450,  451,  452,  453,  454,  456,  457,  458,  459,  461,
      463,  465,  467,  468,  469,  470,  471,  472,  473,  475,
      476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  493,  494,  495,

      496,  497,  498,  499,  500,  502,  503,  504,  506,  507,
      508,  509,  510,  511,  512,  513,  515,  516,  517,  518,
      520,  521,  522,  523,  524,  525,  527,  528,  530,  531,
      532,  533,  536,  537,  538,  540,  541,  542,  543,  545,
      547,  549,  550,  551,  552,  553,  554,  555,  556,  557,
      559,  561,  563,  565,  566,  567,  569,  571,  572,  573,
      575,  576,  577,  579,  581,  582,  583,  584,  585,  586,
      587,  589,  590,  591,  593,  594,  595,  596,  598,  599,
      600,  601,  602,  603,  605,  606,  607,  608,  609,  611,
      613,  615,  616,  618,  620,  621,  623,  624,  626,  628,

      630,  631,  632,  634,  635,  636,  638,  639,  641,  642,
      644,  645,  647,  648,  649,  651,  652,  653,  655,  656,
      658,  659,  661,  663,  665,  666,  668,  670,  672,  673,
      674,  676,  678,  680,  681,  682,  683,  685,  686,  687,
      689,  690,  692,  693,  694,  695,  697,  699,  701,  702,
      703,  704,  705,  706,  708,  709,  710,  711,  712,  713,
      714,  715,  717,  718,  719,  720,  722,  723,  725,  727,
      729,  731,  733,  735,  737,  738,  740,  741,  742,  744,
      745,  746,  748,  750,  752,  753,  755,  757,  759,  761,
      763,  764,  766,  767,  769,  770,  772,  773,  775,  777,

      779,  780,  782,  784,  786,  788,  789,  790,  792,  794,
      795,  796,  798,  800,  802,  803,  804,  806,  807,  808,
      810,  811,  813,  813
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,    1,    1,    1,    5,    1,
        1,    6,    1,    1,    1,    1,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    9,
        1,   10,    1,   11,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        1,   13,    1,    1,   12,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   12,   30,   31,   32,   33,   34,   35,   36,
       37,   38,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[39] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    3,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[634] =
    {   0,
        0,    0,   33,   35,   38,   44,   47,   49,  663,  664,
       52,  640,   55,   55,  664,  664,    0,    0,   54,   52,
       50,   55,   63,   79,  633,   79,  632,  626,   94,   87,
       97,  640,  116,  105,   45,   72,  636,  628,  637,  647,
      664,  664,  100,  105,  116,  664,  651,    0,   98,  123,
      664,  650,  664,  664,    0,    0,  620,  633,  619,  617,
      619,  614,  614,  617,  615,  624,  609,  109,   77,  626,
      612,  127,  121,  611,  621,  605,  602,  616,  126,  608,
      123,  604,  601,  608,  597,    0,    0,  599,  135,    0,
      117,  595,  130,  129,  601,  138,  602,  606,    0,  591,

      604,  152,  147,  606,  169,  583,  159,  591,  152,   49,
      589,  595,  589,  589,  149,  160,  585,  586,  584,  164,
      155,  581,  156,  588,  579,  578,  664,  189,  664,  605,
      186,  664,  604,    0,  576,  588,    0,  571,    0,  588,
      583,  574,  571,  580,  583,  571,  581,  576,  576,  574,
      575,  560,  573,  557,  172,  565,  184,  568,  563,  570,
      568,  568,  560,  562,  553,  551,  552,  558,  544,  560,
      555,  558,  553,  552,  541,  180,  546,  534,  534,  547,
      540,  543,  548,  543,  538,  524,    0,    0,  544,    0,
      539,    0,    0,  526,  531,  177,  520,  178,  528,  194,

        0,  530,  533,  518,  198,  517,  523,  195,  517,  519,
      527,  200,  193,  526,  511,  526,  512,  509,  511,  511,
      519,    0,  518,  503,  507,  512,  504,  203,  503,  503,
      497,  511,  513,  501,    0,  497,  496,  498,  492,  484,
      490,  497,    0,  501,  487,  498,  491,    0,  492,    0,
      492,    0,  488,  480,  478,  487,  482,  474,  479,  198,
      471,  482,  478,  476,    0,    0,    0,  469,  478,  193,
      481,  473,  480,  464,  481,  467,    0,  206,  463,  465,
      459,  476,  207,    0,    0,  474,  457,  453,  458,  453,
      468,  204,  469,  456,  459,  466,  461,  215,  456,  449,

        0,  445,  461,  444,  451,  442,  453,  452,  453,    0,
      436,  449,  438,  441,  442,  219,  447,  432,  445,  439,
      434,    0,  423,  426,    0,  222,    0,  436,  437,  427,
      434,  432,  421,  430,  416,    0,  416,  429,    0,  416,
      412,  430,    0,  411,  426,    0,  404,  426,    0,  412,
        0,  420,    0,    0,  410,  422,  410,  416,  419,  414,
      413,  403,  411,  406,    0,  411,  409,  398,    0,  399,
        0,    0,  407,  405,  395,  404,  387,  400,    0,  390,
      398,  221,  390,  385,  395,  382,  383,  378,  381,  386,
      387,  375,  391,  372,  373,  386,  385,  384,  372,  366,

      366,  374,  368,  367,    0,  376,  360,    0,  374,  371,
      375,  372,  355,  366,  353,    0,  363,  353,  368,  350,
      358,  361,  361,  363,  357,    0,  359,    0,  356,  346,
      340,    0,  357,  348,    0,  337,  351,  351,    0,    0,
        0,  339,  351,  347,  330,  337,  329,  343,  327,    0,
      205,    0,    0,  342,  335,  114,    0,  319,  334,    0,
      336,  331,    0,    0,  336,  321,  336,  335,  330,  333,
        0,  322,  319,    0,  330,  326,  324,    0,  316,  322,
      307,  306,  309,    0,  311,  317,  316,  317,    0,    0,
        0,  304,    0,    0,  306,    0,  311,    0,    0,    0,

      301,  296,    0,  309,  307,    0,  299,    0,  300,    0,
      305,    0,  297,  296,    0,  302,  287,    0,  293,    0,
      299,    0,    0,    0,  298,    0,    0,    0,  283,  297,
        0,    0,    0,  286,  280,  293,    0,  294,  284,    0,
      292,    0,  285,  289,  287,    0,    0,    0,  267,  285,
      277,  264,  270,    0,  267,  268,  272,  267,  268,  276,
      266,    0,  274,  273,  273,    0,  271,    0,    0,    0,
        0,    0,    0,    0,  256,    0,  259,  268,    0,  267,
      268,    0,    0,    0,  266,    0,    0,    0,    0,    0,
      254,    0,  259,    0,  248,    0,  262,    0,    0,  224,

      259,    0,    0,    0,    0,  261,  216,    0,    0,  221,
      235,    0,    0,    0,  233,  225,    0,  228,  213,    0,
      194,    0,  664,  255,  258,  184,  261,  182,  263,  266,
      269,  271,  273
    } ;

static yyconst short int yy_def[634] =
    {   0,
      623,    1,  624,  624,  624,  624,  624,  624,  623,  623,
      625,  626,  627,  623,  623,  623,  628,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  623,
      623,  623,  630,  631,  625,  623,  625,  632,  632,  627,
      623,  627,  623,  623,  633,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  623,  630,  623,  630,
      631,  623,  631,  632,  632,  632,  633,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  632,  632,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  632,
      632,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  632,  632,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  632,  632,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  632,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623
    } ;

static yyconst short int yy_nxt[703] =
    {   0,
       10,   10,   11,   12,   13,   10,   14,   10,   15,   16,
       17,   18,   10,   19,   20,   21,   22,   23,   24,   25,
       18,   26,   18,   18,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   18,   39,   40,   41,
       40,   15,   16,   15,   16,   41,   15,   16,   42,   43,
       42,   43,   15,   16,   46,   44,   16,   44,   16,   51,
       53,   54,  212,   68,   47,   63,  118,   52,   57,  119,
       69,  120,   72,   64,   70,  121,   75,   71,  213,   65,
       58,   66,   73,   59,   60,   61,   62,   76,   67,   77,
      152,   74,   80,  122,  153,   86,   78,   87,   79,  123,

       81,   97,  129,   82,   88,   89,   83,   93,   84,   90,
      102,   94,  130,   98,  132,   95,   99,  133,   46,  100,
      101,   96,  114,  135,  136,  115,  103,   51,   47,  104,
      106,  530,  181,  107,  116,   52,  108,  109,  149,  150,
      151,  117,  156,  182,  531,  157,  160,  110,  111,  170,
      112,  158,  113,  161,  167,  184,  159,  168,  171,  177,
      186,  185,  178,  187,  189,  179,  180,  195,  197,  190,
      218,  210,  207,  220,  198,  229,  230,  232,  219,  226,
      233,  196,  200,  208,   55,  227,   48,  201,  202,  211,
      294,  129,  221,  203,  228,  132,  222,  258,  133,  204,

      205,  130,  255,  256,  278,  259,  297,  279,  295,  298,
      300,  305,  309,  310,  316,  314,  331,  359,  301,  367,
      622,  526,  368,  375,  332,  317,  381,  376,  389,  360,
      306,  315,  396,  390,  413,  527,  382,  610,  422,  467,
      621,  611,  397,  423,  620,  414,  619,  468,  424,  425,
      618,  617,  616,  615,  612,   10,   10,   10,   45,   45,
       45,   50,   50,   50,   56,   56,  128,  128,  128,  131,
      131,  131,  134,  134,  137,  137,  614,  613,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,

      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  529,  528,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,

      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  421,  420,  419,  418,
      417,  416,  415,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  395,  394,
      393,  392,  391,  388,  387,  386,  385,  384,  383,  380,
      379,  378,  377,  374,  373,  372,  371,  370,  369,  366,

      365,  364,  363,  362,  361,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  337,  336,  335,  334,
      333,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  313,  312,  311,  308,  307,  304,
      303,  302,  299,  296,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  261,  260,  257,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,

      241,  240,  239,  238,  237,  623,  623,  236,  235,  234,
      231,  225,  224,  223,  217,  216,  215,  214,  209,  206,
      199,  194,  193,  192,  191,  188,  183,  176,  175,  174,
      173,  172,  169,  166,  165,  164,  163,  162,  155,  154,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  139,
      138,  623,  623,  127,  126,  125,  124,  105,   92,   91,
       85,   49,  623,    9,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623
    } ;

static yyconst short int yy_chk[703] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    5,
        4,    3,    3,    4,    4,    6,    5,    5,    7,    7,
        8,    8,    6,    6,   11,    7,    7,    8,    8,   13,
       14,   14,  110,   21,   11,   20,   35,   13,   19,   35,
       21,   35,   22,   20,   21,   35,   23,   21,  110,   20,
       19,   20,   22,   19,   19,   19,   19,   23,   20,   23,
       69,   22,   24,   36,   69,   26,   23,   26,   23,   36,

       24,   30,   43,   24,   26,   26,   24,   29,   24,   26,
       31,   29,   43,   30,   44,   29,   30,   44,   45,   30,
       30,   29,   34,   49,   49,   34,   31,   50,   45,   31,
       33,  456,   91,   33,   34,   50,   33,   33,   68,   68,
       68,   34,   72,   91,  456,   72,   73,   33,   33,   81,
       33,   72,   33,   73,   79,   93,   72,   79,   81,   89,
       94,   93,   89,   94,   96,   89,   89,  102,  103,   96,
      115,  109,  107,  116,  103,  121,  121,  123,  115,  120,
      123,  102,  105,  107,  628,  120,  626,  105,  105,  109,
      196,  128,  116,  105,  120,  131,  116,  157,  131,  105,

      105,  128,  155,  155,  176,  157,  198,  176,  196,  198,
      200,  205,  208,  208,  213,  212,  228,  260,  200,  270,
      621,  451,  270,  278,  228,  213,  283,  278,  292,  260,
      205,  212,  298,  292,  316,  451,  283,  600,  326,  382,
      619,  600,  298,  326,  618,  316,  616,  382,  326,  326,
      615,  611,  610,  607,  600,  624,  624,  624,  625,  625,
      625,  627,  627,  627,  629,  629,  630,  630,  630,  631,
      631,  631,  632,  632,  633,  633,  606,  601,  597,  595,
      593,  591,  585,  581,  580,  578,  577,  575,  567,  565,
      564,  563,  561,  560,  559,  558,  557,  556,  555,  553,

      552,  551,  550,  549,  545,  544,  543,  541,  539,  538,
      536,  535,  534,  530,  529,  525,  521,  519,  517,  516,
      514,  513,  511,  509,  507,  505,  504,  502,  501,  497,
      495,  492,  488,  487,  486,  485,  483,  482,  481,  480,
      479,  477,  476,  475,  473,  472,  470,  469,  468,  467,
      466,  465,  462,  461,  459,  458,  455,  454,  449,  448,
      447,  446,  445,  444,  443,  442,  438,  437,  436,  434,
      433,  431,  430,  429,  427,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  415,  414,  413,  412,  411,  410,
      409,  407,  406,  404,  403,  402,  401,  400,  399,  398,

      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  381,  380,  378,  377,  376,
      375,  374,  373,  370,  368,  367,  366,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  352,  350,  348,
      347,  345,  344,  342,  341,  340,  338,  337,  335,  334,
      333,  332,  331,  330,  329,  328,  324,  323,  321,  320,
      319,  318,  317,  315,  314,  313,  312,  311,  309,  308,
      307,  306,  305,  304,  303,  302,  300,  299,  297,  296,
      295,  294,  293,  291,  290,  289,  288,  287,  286,  282,
      281,  280,  279,  276,  275,  274,  273,  272,  271,  269,

      268,  264,  263,  262,  261,  259,  258,  257,  256,  255,
      254,  253,  251,  249,  247,  246,  245,  244,  242,  241,
      240,  239,  238,  237,  236,  234,  233,  232,  231,  230,
      229,  227,  226,  225,  224,  223,  221,  220,  219,  218,
      217,  216,  215,  214,  211,  210,  209,  207,  206,  204,
      203,  202,  199,  197,  195,  194,  191,  189,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  156,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,

      141,  140,  138,  136,  135,  133,  130,  126,  125,  124,
      122,  119,  118,  117,  114,  113,  112,  111,  108,  106,
      104,  101,  100,   98,   97,   95,   92,   88,   85,   84,
       83,   82,   80,   78,   77,   76,   75,   74,   71,   70,
       67,   66,   65,   64,   63,   62,   61,   60,   59,   58,
       57,   52,   47,   40,   39,   38,   37,   32,   28,   27,
       25,   12,    9,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2008 $organization$.
 *
 * This software is provided by the author and contributors ``as is'' and
 * any express or implied warranties, including, but not limited to, the
 * implied warranties of merchantability and fitness for a particular purpose
 * are disclaimed.  In no event shall the author or contributors be liable
 * for any direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute goods
 * or services; loss of use, data, or profits; or business interruption)
 * however caused and on any theory of liability, whether in contract, strict
 * liability, or tort (including negligence or otherwise) arising in any way
 * out of the use of this software, even if advised of the possibility of
 * such damage.
 *
 *   File: ccxxlex.l
 *
 * Author: $author$
 *   Date: 5/1/2008
 **********************************************************************
 */
#include "ccxxlexer.hxx"
#define XXSwitch(on, text, token) on(text, token); OnSwitch(text, token)
#define XXPush(on, text, token) on(text, token); OnPush(text, token)
#define XXPop(on, text, token) on(text, token); OnPop(text, token)
#define XX(on, text, token) on(text, token)
#define COMMENT 1
#define COMMENTLN 2
#define INCLUDE 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_SWITCH_STATE
static void yy_switch_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 624 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 664 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ XXPush(OnBeginCommentLN, yytext, COMMENTLN); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ XX(OnString, yytext, 0); }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ XX(OnChar, yytext, 0); }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ XXPush(OnProcessor, yytext, INCLUDE); }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ XXPush(OnProcessor, yytext, INCLUDE); }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ XX(OnProcessor, yytext, 0); }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ XX(OnProcessor, yytext, 0); }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ XX(OnProcessor, yytext, 0); }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ XX(OnText, yytext, 0); }
	YY_BREAK


case 152:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ XXPop(OnText, yytext, INCLUDE);}
	YY_BREAK


case 155:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, COMMENT);}
	YY_BREAK


case 156:
YY_RULE_SETUP
{ XXPop(OnEndCommentLN, yytext, COMMENTLN);}
	YY_BREAK


case 157:
YY_RULE_SETUP
{ XX(OnLT, yytext, 0);}
	YY_BREAK
case 158:
YY_RULE_SETUP
{ XX(OnGT, yytext, 0);}
	YY_BREAK
case 159:
YY_RULE_SETUP
{ XX(OnText, yytext, 0);}
	YY_BREAK

case 160:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(COMMENTLN):
			case YY_STATE_EOF(INCLUDE):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStreamInterface &out, cCharStreamInterface &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStreamInterface *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStreamInterface* new_in, cCharStreamInterface* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 624 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 624 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 623);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStreamInterface* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStreamInterface* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStreamInterface* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_SWITCH_STATE
void yyIsLexer::yy_switch_state( int new_state )
    {
    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

