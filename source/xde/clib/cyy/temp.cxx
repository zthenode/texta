/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStreamInterface;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStreamInterface* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 45
#define YY_END_OF_BUFFER 46
static yyconst short int yy_acclist[106] =
    {   0,
       46,    4,   45,    4,   45,    4,   45,    7,   45,    7,
       45,    7,   45,   14,   45,   14,   45,   16,   45,   16,
       17,   45,   17,   45,   16,   45,   19,   45,   19,   20,
       45,   20,   45,   19,   45,   22,   45,   22,   45,   38,
       45,   38,   45,   38,   45,   45,   39,   45,   39,   45,
       40,   45,   41,   45,   41,   45,   42,   45,   44,   45,
       43,   45,    2,    1,    3,    5,    6,    8,    8,   10,
        9,   11,   21,   36,   37,   13,   12,   15,   18,   27,
       36,   25,   36,   32,   36,   33,   36,   26,   36,   30,
       36,   31,   36,   28,   36,   24,   36,   29,   36,   23,

       36,   34,   36,   35,   36
    } ;

static yyconst short int yy_accept[185] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    6,    8,   10,   12,   14,
       16,   18,   20,   23,   25,   27,   29,   32,   34,   36,
       38,   40,   42,   44,   46,   47,   49,   51,   53,   55,
       57,   59,   61,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   72,   73,   73,   73,   74,   74,   74,
       74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   76,   77,   78,   79,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       84,   84,   84,   84,   84,   84,   86,   86,   86,   86,
       86,   88,   88,   88,   90,   90,   90,   90,   90,   92,
       92,   92,   92,   94,   94,   94,   96,   96,   96,   96,
       98,   98,   98,  100,  100,  100,  100,  100,  100,  100,
      100,  102,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  106,  106
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    1,    8,    9,
       10,   11,    1,    1,    1,   12,   13,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   14,    1,    1,
       15,    1,   16,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       17,   18,   19,    1,    1,    1,    1,    1,   20,   21,

       22,    1,    1,    1,   23,    1,    1,   24,   25,   26,
       27,   28,    1,   29,    1,   30,   31,    1,    1,    1,
        1,    1,   32,    1,   33,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[34] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[196] =
    {   0,
        0,    1,    2,    3,  253,  248,    0,    2,   14,   20,
      247,  242,    7,   17,    0,    0,   24,   26,   27,   33,
      245,  240,  242,  387,    5,   21,  387,  231,   30,  387,
       47,  387,  387,  387,  220,  387,  387,  387,  215,  387,
      197,  387,   79,   34,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  111,    0,
      387,  387,   30,  387,  218,  217,  387,  142,    0,    0,
      207,   32,  387,  206,  201,  200,   34,  195,  194,  189,
      175,  387,  387,  387,  387,  387,    0,  183,  182,  163,
      176,  171,  170,  164,  163,  158,  157,  152,  135,  150,

      149,  140,  146,  141,  164,  140,  137,  130,  129,  128,
      111,  132,   54,  108,  123,  116,   62,   68,  387,  117,
      113,  111,  126,  132,  103,   87,  170,  177,  183,  387,
       47,  189,  195,  201,  207,  387,   66,  213,  219,  225,
      387,  231,  237,  387,  243,   46,  249,  255,  387,   53,
      261,  267,  387,  273,  279,  387,   60,  285,  291,  387,
      297,  303,  387,   56,   45,  309,   50,   48,  315,  321,
      387,   47,   34,  327,   26,  333,  339,  387,  345,  351,
      357,  387,  387,  364,  366,  368,  370,  372,  374,  376,
      378,  380,  382,  384,    0

    } ;

static yyconst short int yy_def[196] =
    {   0,
      184,  184,  185,  185,  186,  186,  187,  187,  188,  188,
      189,  189,  190,  190,  191,  191,  192,  192,  193,  193,
      194,  194,  183,  183,  183,  183,  183,  183,  183,  183,
      195,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  195,   59,
      183,  183,  183,  183,  183,  183,  183,   43,   43,   43,
       68,   68,  183,   68,   68,   68,   68,   68,   68,   68,
       68,  183,  183,  183,  183,  183,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,  183,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,  183,
       68,   68,   68,   68,   68,  183,   68,   68,   68,   68,
      183,   68,   68,  183,   68,   68,   68,   68,  183,   68,
       68,   68,  183,   68,   68,  183,   68,   68,   68,  183,
       68,   68,  183,   68,   68,   68,   68,   68,   68,   68,
      183,   68,   68,   68,   68,   68,   68,  183,   68,   68,
       68,  183,    0,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183

    } ;

static yyconst short int yy_nxt[421] =
    {   0,
       59,   33,   34,   33,   34,  183,   25,   25,   28,   28,
       54,   55,   35,   43,   35,   37,   38,   26,   26,   29,
       29,   37,   38,   43,   44,   39,   47,   56,   47,   50,
       48,   39,   48,   51,   44,   50,   58,  179,   56,   51,
       82,   83,   84,   89,   94,  175,   95,   58,   60,   60,
       60,   82,   61,   62,   90,  128,  129,  128,  174,  173,
      130,  172,   63,  117,  118,  117,  168,  167,  119,  117,
      118,  117,  166,  165,  119,  164,  157,  150,   64,   68,
       69,   70,   69,   71,   72,   73,   74,   75,   68,   68,
       76,   77,   78,   79,   68,   80,   68,   68,   68,   68,

       68,   81,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   60,   60,   60,  146,  183,  183,  134,  135,
      134,  145,  138,  136,  137,  133,  183,  139,  140,  139,
      132,  131,  141,  142,  143,  142,  127,  126,  144,  125,
      124,  123,  183,   68,   87,   68,   68,   68,  122,   68,
       68,  121,  116,   68,   68,   68,   68,  115,   68,  114,
      113,  112,  111,  110,   68,  117,  118,  117,  109,  108,
      119,  147,  148,  147,  107,  106,  149,  120,  128,  129,
      128,  105,  104,  130,  128,  129,  128,  103,  102,  130,
      151,  152,  151,  101,  100,  153,  154,  155,  154,   99,

       98,  156,  134,  135,  134,   97,   96,  136,  134,  135,
      134,   93,   92,  136,  158,  159,  158,   91,   88,  160,
      139,  140,  139,   86,   85,  141,  139,  140,  139,   67,
       66,  141,  142,  143,  142,   65,   57,  144,  142,  143,
      142,  183,   53,  144,  161,  162,  161,   53,   41,  163,
      147,  148,  147,   41,   31,  149,  147,  148,  147,   31,
      183,  149,  151,  152,  151,  183,  183,  153,  151,  152,
      151,  183,  183,  153,  154,  155,  154,  183,  183,  156,
      154,  155,  154,  183,  183,  156,  158,  159,  158,  183,
      183,  160,  158,  159,  158,  183,  183,  160,  161,  162,

      161,  183,  183,  163,  161,  162,  161,  183,  183,  163,
      169,  170,  169,  183,  183,  171,  169,  170,  169,  183,
      183,  171,  169,  170,  169,  183,  183,  171,  176,  177,
      176,  183,  183,  178,  176,  177,  176,  183,  183,  178,
      176,  177,  176,  183,  183,  178,  180,  181,  180,  183,
      183,  182,  180,  181,  180,  183,  183,  182,  180,  181,
      180,  183,  183,  182,   24,   24,   27,   27,   30,   30,
       32,   32,   36,   36,   40,   40,   42,   42,   45,   45,
       46,   46,   49,   49,   52,   52,   23,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183
    } ;

static yyconst short int yy_chk[421] =
    {   0,
      195,    7,    7,    8,    8,    0,    1,    2,    3,    4,
       25,   25,    7,   13,    8,    9,    9,    1,    2,    3,
        4,   10,   10,   14,   13,    9,   17,   26,   18,   19,
       17,   10,   18,   19,   14,   20,   29,  175,   26,   20,
       44,   63,   63,   72,   77,  173,   77,   29,   31,   31,
       31,   44,   31,   31,   72,  113,  113,  113,  172,  168,
      113,  167,   31,  117,  117,  117,  165,  164,  117,  118,
      118,  118,  157,  150,  118,  146,  137,  131,   31,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   59,   59,   59,  126,   59,   59,  120,  120,
      120,  125,  122,  120,  121,  116,   59,  123,  123,  123,
      115,  114,  123,  124,  124,  124,  112,  111,  124,  110,
      109,  108,   59,   68,   68,   68,   68,   68,  107,   68,
       68,  106,  104,   68,   68,   68,   68,  103,   68,  102,
      101,  100,   99,   98,   68,  105,  105,  105,   97,   96,
      105,  127,  127,  127,   95,   94,  127,  105,  128,  128,
      128,   93,   92,  128,  129,  129,  129,   91,   90,  129,
      132,  132,  132,   89,   88,  132,  133,  133,  133,   81,

       80,  133,  134,  134,  134,   79,   78,  134,  135,  135,
      135,   76,   75,  135,  138,  138,  138,   74,   71,  138,
      139,  139,  139,   66,   65,  139,  140,  140,  140,   41,
       39,  140,  142,  142,  142,   35,   28,  142,  143,  143,
      143,   23,   22,  143,  145,  145,  145,   21,   12,  145,
      147,  147,  147,   11,    6,  147,  148,  148,  148,    5,
        0,  148,  151,  151,  151,    0,    0,  151,  152,  152,
      152,    0,    0,  152,  154,  154,  154,    0,    0,  154,
      155,  155,  155,    0,    0,  155,  158,  158,  158,    0,
        0,  158,  159,  159,  159,    0,    0,  159,  161,  161,

      161,    0,    0,  161,  162,  162,  162,    0,    0,  162,
      166,  166,  166,    0,    0,  166,  169,  169,  169,    0,
        0,  169,  170,  170,  170,    0,    0,  170,  174,  174,
      174,    0,    0,  174,  176,  176,  176,    0,    0,  176,
      177,  177,  177,    0,    0,  177,  179,  179,  179,    0,
        0,  179,  180,  180,  180,    0,    0,  180,  181,  181,
      181,    0,    0,  181,  184,  184,  185,  185,  186,  186,
      187,  187,  188,  188,  189,  189,  190,  190,  191,  191,
      192,  192,  193,  193,  194,  194,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2008 $organization$
 *
 * This software is provided by the author and contributors ``as is'' 
 * and any express or implied warranties, including, but not limited to, 
 * the implied warranties of merchantability and fitness for a particular 
 * purpose are disclaimed. In no event shall the author or contributors 
 * be liable for any direct, indirect, incidental, special, exemplary, 
 * or consequential damages (including, but not limited to, procurement 
 * of substitute goods or services; loss of use, data, or profits; or 
 * business interruption) however caused and on any theory of liability, 
 * whether in contract, strict liability, or tort (including negligence 
 * or otherwise) arising in any way out of the use of this software, 
 * even if advised of the possibility of such damage.
 *
 *   File: clexercgilex.l
 *
 * Author: $author$
 *   Date: 8/10/2008
 **********************************************************************
 */
/*
 * defines
 */
/*
 * includes
 */
#include "cdebug.hxx"
#include "clexercgilexer.hxx"
#define XX(on, text, token) on(text, token)
#define XXEndof(on, text, token) on(text, token); yyterminate()
#define XXPush(on, text, token) on(text, token); OnPush(text, token)
#define XXPop(on, text, token) on(text, token); OnPop(text, token)
#define XXSwitch(on, text, token) on(text, token); OnSwitch(text, token)
/*
 * options
 */
#define CGIFINAL 1
#define CGIBODY 2
#define CGIPATH 3
#define CGIEXT 4
#define CGITEXT 5
#define CGIBEFORE 6
#define CGIBEFOREESC 7
#define CGIAFTER 8
#define CGIBETWEEN 9
#define CGICOMMENTEOL 10

/*
 * rules
 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_SWITCH_STATE
static void yy_switch_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 184 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 387 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ XXSwitch(OnEndCGIBefore, yytext, CGIBODY); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ XXPush(OnSkip, yytext, CGICOMMENTEOL); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ XX(OnCGIBeforeText, yytext+1, -1); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ XX(OnCGIBeforeText, yytext, -1); }
	YY_BREAK


case 5:
YY_RULE_SETUP
{ XXPush(OnSkip, yytext, CGICOMMENTEOL); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ XX(OnCGIAfterText, yytext+1, -1); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ XX(OnCGIAfterText, yytext, -1); }
	YY_BREAK


case 8:
YY_RULE_SETUP
{ XXPush(OnBeginCGIBeforeAny, yytext+1, CGIBEFORE); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ XXSwitch(OnSkip, yytext, CGIFINAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ XXPush(OnSkip, yytext, CGICOMMENTEOL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ XXPush(OnBeginCGIText, yytext, CGITEXT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ XXPush(OnBeginCGIPath, yytext, CGIPATH); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ XXPush(OnBeginCGIExtension, yytext, CGIEXT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ }
	YY_BREAK


case 15:
YY_RULE_SETUP
{ XXPop(OnEndCGIPath, yytext, CGIPATH); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ XX(OnCGIPath, yytext, -1); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ }
	YY_BREAK


case 18:
YY_RULE_SETUP
{ XXPop(OnEndCGIExtension, yytext, CGIEXT); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ XX(OnCGIExtension, yytext, -1); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ }
	YY_BREAK


case 21:
YY_RULE_SETUP
{ XXPop(OnEndCGIText, yytext, CGITEXT); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ XX(OnCGIText, yytext, -1); }
	YY_BREAK


case 23:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeComment, yytext, CGIAFTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeCommentLN, yytext, CGIAFTER); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeProcessor, yytext, CGIAFTER); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeDefine, yytext, CGIAFTER); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeKeyword, yytext, CGIAFTER); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeKeywordX, yytext, CGIAFTER); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeKeywordY, yytext, CGIAFTER); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeString, yytext, CGIAFTER); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeChar, yytext, CGIAFTER); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeDefineT, yytext, CGIBETWEEN); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeDefineL, yytext, CGIBETWEEN); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeImportL, yytext, CGIBETWEEN); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ XXSwitch(OnCGIBeforeIncludeL, yytext, CGIBETWEEN); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ XXSwitch(OnSkip, yytext, CGIAFTER); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ XX(OnCGIBeforeAny, yytext+1, 0); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ XX(OnCGIBeforeAny, yytext, 0); }
	YY_BREAK


case 39:
YY_RULE_SETUP
{ XX(OnCGIAfterAnyText, yytext, -1); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ XXPop(OnEndCGIAfterAny, yytext, CGIAFTER); }
	YY_BREAK


case 41:
YY_RULE_SETUP
{ XX(OnCGIBetweenAnyText, yytext, -1); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ XXSwitch(OnEndCGIBetweenAny, yytext, CGIAFTER); }
	YY_BREAK


case 43:
YY_RULE_SETUP
{ XXPop(OnSkip, yytext, CGICOMMENTEOL); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ }
	YY_BREAK

case 45:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(CGIFINAL):
			case YY_STATE_EOF(CGIBODY):
			case YY_STATE_EOF(CGIPATH):
			case YY_STATE_EOF(CGIEXT):
			case YY_STATE_EOF(CGITEXT):
			case YY_STATE_EOF(CGIBEFORE):
			case YY_STATE_EOF(CGIBEFOREESC):
			case YY_STATE_EOF(CGIAFTER):
			case YY_STATE_EOF(CGIBETWEEN):
			case YY_STATE_EOF(CGICOMMENTEOL):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStreamInterface &out, cCharStreamInterface &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStreamInterface *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStreamInterface* new_in, cCharStreamInterface* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 184 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 184 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 183);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStreamInterface* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStreamInterface* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStreamInterface* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_SWITCH_STATE
void yyIsLexer::yy_switch_state( int new_state )
    {
    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

