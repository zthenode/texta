///////////////////////////////////////////////////////////////////////
//   File: evcrypto.hpp
//
// Author: $author$
//   Date: 10/25/2007
//
//    $Id$
///////////////////////////////////////////////////////////////////////

#ifndef _EVCRYPTO_HPP
#define _EVCRYPTO_HPP

#include "evinstance.hpp"

class EV_EXPORT_CLASS EvRSAPublicKey;
class EV_EXPORT_CLASS EvRSAPrivateKey;

class EV_EXPORT_CLASS EvRC4;
class EV_EXPORT_CLASS EvDES3;
class EV_EXPORT_CLASS EvAES;

class EV_EXPORT_CLASS EvMD5;
class EV_EXPORT_CLASS EvSHA1;

///////////////////////////////////////////////////////////////////////
//  Class: EvCrypto
//
// Author: $author$
//   Date: 10/25/2007
///////////////////////////////////////////////////////////////////////
class EV_EXPORT_CLASS EvCrypto
: virtual public EvInstance
{
public:
    typedef EvInstance CImplements;
    typedef EvCrypto CDerives;

    ///////////////////////////////////////////////////////////////////////
    //   Enum:  
    //
    // Author: $author$
    //   Date: 10/25/2007
    ///////////////////////////////////////////////////////////////////////
    enum 
    {
        EV_FIRST_ERROR = ::EV_NEXT_ERROR,

        EV_ERROR_KEY_SIZE_INVALID = EV_FIRST_ERROR,
        EV_ERROR_KEY_SIZE_UNDER,
        EV_ERROR_KEY_SIZE_OVER,

        EV_ERROR_IV_SIZE_INVALID,
        EV_ERROR_IV_SIZE_UNDER,
        EV_ERROR_IV_SIZE_OVER,

        EV_ERROR_BLOCK_SIZE_INVALID,
        EV_ERROR_BLOCK_SIZE_UNDER,
        EV_ERROR_BLOCK_SIZE_OVER,

        EV_NEXT_ERROR,
        EV_LAST_ERROR = EV_NEXT_ERROR-1,

        EV_ERRORS = EV_LAST_ERROR-EV_FIRST_ERROR+1
    };

    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAll
    //
    //   Author: $author$
    //     Date: 10/27/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAll() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireRSAPublicKey
    //
    //   Author: $author$
    //     Date: 10/27/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvRSAPublicKey* 
    AcquireRSAPublicKey
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseRSAPublicKey
    //
    //   Author: $author$
    //     Date: 10/27/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseRSAPublicKey
    (EvRSAPublicKey& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllRSAPublicKeys
    //
    //   Author: $author$
    //     Date: 10/27/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllRSAPublicKeys() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireRSAPrivateKey
    //
    //   Author: $author$
    //     Date: 10/28/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvRSAPrivateKey* 
    AcquireRSAPrivateKey
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseRSAPrivateKey
    //
    //   Author: $author$
    //     Date: 10/28/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseRSAPrivateKey
    (EvRSAPrivateKey& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllRSAPrivateKeys
    //
    //   Author: $author$
    //     Date: 10/28/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllRSAPrivateKeys() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireRC4
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvRC4* 
    AcquireRC4
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseRC4
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseRC4
    (EvRC4& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllRC4s
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllRC4s() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireDES3
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvDES3* 
    AcquireDES3
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseDES3
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseDES3
    (EvDES3& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllDES3s
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllDES3s() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireAES
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvAES* 
    AcquireAES
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAES
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAES
    (EvAES& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllAESs
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllAESs() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireMD5
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvMD5* 
    AcquireMD5
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseMD5
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseMD5
    (EvMD5& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllMD5s
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllMD5s() = 0;

    ///////////////////////////////////////////////////////////////////////
    // Function: AcquireSHA1
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvSHA1* 
    AcquireSHA1
    (EvError& error) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseSHA1
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseSHA1
    (EvSHA1& acquired) = 0;
    ///////////////////////////////////////////////////////////////////////
    // Function: ReleaseAllSHA1s
    //
    //   Author: $author$
    //     Date: 10/30/2007
    ///////////////////////////////////////////////////////////////////////
    virtual EvError ReleaseAllSHA1s() = 0;
};
#endif // _EVCRYPTO_HPP
