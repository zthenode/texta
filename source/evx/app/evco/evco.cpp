///////////////////////////////////////////////////////////////////////
//   File: evco.cpp
//
// Author: $author$
//   Date: 9/11/2007
//
//    $Id$
///////////////////////////////////////////////////////////////////////
#include "evco.hpp"

///////////////////////////////////////////////////////////////////////
//  Class: CEvCoMain
//
// Author: $author$
//   Date: 9/11/2007
///////////////////////////////////////////////////////////////////////
CEvCoMain g_coMain;

///////////////////////////////////////////////////////////////////////
//  Class: CEvCoReadOnlyMainArg
//
// Author: $author$
//   Date: 9/16/2007
///////////////////////////////////////////////////////////////////////
class CEvCoReadOnlyMainArg
: public CEvMainArg
{
public:
    typedef CEvMainArg CExtends;
    typedef CEvCoReadOnlyMainArg CDerives;
    ///////////////////////////////////////////////////////////////////////
    // Constructor: CEvCoReadOnlyMainArg
    //
    //       Author: $author$
    //         Date: 9/16/2007
    ///////////////////////////////////////////////////////////////////////
    CEvCoReadOnlyMainArg
    (const char* shortName="n",
     const char* longName="read-only",
     const char* description="ReadOnly",
     const char* parameters="")
    : CExtends(shortName, longName, description, parameters) 
    {
    }
    ///////////////////////////////////////////////////////////////////////
    // Function: MainArg
    //
    //   Author: $author$
    //     Date: 9/16/2007
    ///////////////////////////////////////////////////////////////////////
    virtual int MainArg
    (int args, int argn, const char *arg, 
     int argc, const char** argv, const char** env) 
    {
        g_coMain.SetIsReadOnly();
        return argn;
    }
} g_coReadOnlyArg;
